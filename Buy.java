import java.sql.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

public class Buy extends javax.swing.JFrame {  

    private javax.swing.JButton backbtn;
    private javax.swing.JButton buybtn;
    private javax.swing.JTextField cName;
    private javax.swing.JTextField cQty;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;   
    private String uname; 
    private Integer bal;

    /**
     * Creates new form Buy
     */
    public Buy(String name, Integer balance){
        uname = name;
        bal = balance;
        initComponents();
        setVisible(true);
        displayAvailable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        cName = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        cQty = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        buybtn = new javax.swing.JButton();
        backbtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Segoe UI Historic", 0, 24)); // NOI18N
        jLabel1.setText("Buy Cryptos");

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jLabel2.setText("Available Cryptos:");

        jLabel3.setText("Enter the cyprto name you would like to buy:");

        jLabel4.setText("Quantity:");

        buybtn.setText("Buy");
        buybtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buybtnActionPerformed(evt);
            }
        });

        backbtn.setText("Back");
        backbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backbtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addComponent(cName, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(cQty, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 494, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(196, 196, 196)
                        .addComponent(jLabel1)))
                .addContainerGap(23, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(backbtn)
                .addGap(43, 43, 43)
                .addComponent(buybtn)
                .addGap(175, 175, 175))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 137, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cQty, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cName, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buybtn)
                    .addComponent(backbtn))
                .addGap(18, 18, 18))
        );

        pack();
    }//  </editor-fold>   
    
    private void displayAvailable(){
        try{
            Class.forName("org.sqlite.JDBC");
            java.sql.Connection con = DriverManager.getConnection("jdbc:sqlite:C:/Users/dassa/CRYPTO.db");
            
            java.sql.Statement stmt = con.createStatement();
            String sql = "SELECT cname, cprice FROM available";
            ResultSet rs=stmt.executeQuery(sql);  //obj contains the count table
            String resultText = "Currency Name\t\tCurrency Price\n";
            while(rs.next()){
                String cName = rs.getString("cname");
                String cPrice = rs.getString("cprice");
                resultText += cName + "\t\t" + cPrice + "\n";
            }
            jTextArea1.setText(resultText);
        }catch(Exception e){
            System.err.println( e.getClass().getName() + ": " + e.getMessage() );
            System.exit(0);
        }
    }

    private void buybtnActionPerformed(java.awt.event.ActionEvent evt) {    
        try{
            Class.forName("org.sqlite.JDBC");
            java.sql.Connection con = DriverManager.getConnection("jdbc:sqlite:C:/Users/dassa/CRYPTO.db");
            
            int flag = 0;
            Integer cPrice = 0;

            String name = cName.getText();
            Integer qty = Integer.valueOf(cQty.getText());
            
            java.sql.Statement stmt = con.createStatement();
            String sql = "SELECT cname, cprice FROM available";
            ResultSet rs=stmt.executeQuery(sql);
            while(rs.next()){
                String cName = rs.getString("cname");                
                cPrice = rs.getInt("cprice");
                if(name.equals(cName)){
                    flag = 1;
                    break;
                }
            }

            if (bal < (qty * cPrice)){
                JOptionPane.showMessageDialog(null, "Insufficient Funds", "Funds low", 1);
            }

            if((flag == 1) && (bal >= (qty * cPrice))){
                sql = "INSERT INTO bought(uname, cname, cprice, cqty, total) VALUES(?,?,?,?,?)" ;
                PreparedStatement pstmt = con.prepareStatement(sql);
                pstmt.setString(1, uname);
                pstmt.setString(2, name);
                pstmt.setInt(3, cPrice);
                pstmt.setInt(4, qty);
                pstmt.setInt(5, cPrice * qty);
                pstmt.executeUpdate();
                bal = bal - (qty * cPrice);
                JOptionPane.showMessageDialog(null, "Bought Successfully", "Buying Success", 1);
            }

            this.dispose();
            new Home(uname, bal);

        }catch(Exception e){
            System.err.println( e.getClass().getName() + ": " + e.getMessage() );
            System.exit(0);
        }
    } 

    private void backbtnActionPerformed(java.awt.event.ActionEvent evt) { 
        this.dispose();
        new Home(uname, bal);
    }
}
